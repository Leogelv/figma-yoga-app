"use client";

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
// import PracticeCard from '../../../components/PracticeCard';
import QuizButton from '@/components/quiz/QuizButton';
// import { Practice, filterPractices } from '../../../data/practices';
import { useSearchParams } from 'next/navigation';

// –í—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø Practice
interface Practice {
  id: string;
  name: string;
  type: string;
  // –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
}

export default function ResultsPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [tg, setTg] = useState<any>(null);
  const [filteredPractices, setFilteredPractices] = useState<Practice[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedPractice, setSelectedPractice] = useState<Practice | null>(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
    const telegram = (window as any).Telegram?.WebApp;
    if (telegram) {
      telegram.ready();
      setTg(telegram);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
      telegram.setHeaderColor('#FFFFFF');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ —Ö–µ–¥–µ—Ä–µ
      telegram.BackButton.show();
      telegram.BackButton.onClick(() => {
        router.back();
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    const practiceType = searchParams.get('type') as 'body' | 'meditation' | 'breathing' | undefined;
    const bodyType = searchParams.get('bodyType') as 'yoga' | 'posture' | undefined;
    const difficulty = searchParams.get('difficulty') as 'beginner' | 'intermediate' | 'advanced' | undefined;
    const duration = searchParams.get('duration');
    const goal = searchParams.get('goal');
    const meditationType = searchParams.get('meditationType') as 'relaxation' | 'concentration' | 'sleep' | 'emotions' | undefined;
    const breathingIntensity = searchParams.get('breathingIntensity') as 'mild' | 'medium' | 'intense' | undefined;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    const filters: any = {};
    
    if (practiceType) filters.practiceType = practiceType;
    if (bodyType) filters.bodyType = bodyType;
    if (difficulty) filters.difficulty = difficulty;
    if (meditationType) filters.meditationType = meditationType;
    if (breathingIntensity) filters.breathingIntensity = breathingIntensity;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (duration) {
      let durationRange: [number, number] = [0, 0];
      
      if (duration === 'short') {
        durationRange = [0, 15];
      } else if (duration === 'medium') {
        durationRange = [15, 30];
      } else if (duration === 'long') {
        durationRange = [30, 120];
      }
      
      if (durationRange[0] > 0 || durationRange[1] > 0) {
        filters.duration = durationRange;
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (goal) {
      filters.goals = [goal];
    }
    
    console.log('–ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', filters);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –≤–º–µ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    // const practices = filterPractices(filters);
    setFilteredPractices([]);
    setIsLoading(false);
  }, [searchParams, router]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
  const handleSelectPractice = (practice: Practice) => {
    setSelectedPractice(practice);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
  const handleStartPractice = () => {
    if (selectedPractice) {
      if (tg) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö Telegram
        tg.CloudStorage.setItem('selectedPractice', JSON.stringify(selectedPractice), function(error: Error | null, stored: boolean) {
          if (stored) {
            console.log('–ü—Ä–∞–∫—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Telegram CloudStorage');
          }
          if (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏:', error);
          }
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∞–∫—Ç–∏–∫–∏
          router.push(`/practice/${selectedPractice.id}`);
        });
      } else {
        // –ï—Å–ª–∏ Telegram API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∞–∫—Ç–∏–∫–∏
        router.push(`/practice/${selectedPractice.id}`);
      }
    }
  };

  // –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏
  if (isLoading) {
    return (
      <div style={{ 
        display: 'flex', 
        flexDirection: 'column', 
        alignItems: 'center', 
        justifyContent: 'center',
        minHeight: '100vh',
        padding: '16px'
      }}>
        <div style={{ 
          width: '48px', 
          height: '48px', 
          border: '4px solid #f3f3f3',
          borderTop: '4px solid #337FFF', 
          borderRadius: '50%',
          animation: 'spin 1s linear infinite',
          marginBottom: '16px'
        }} />
        <style jsx>{`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}</style>
        <p style={{ 
          fontFamily: 'Montserrat', 
          fontSize: '16px', 
          textAlign: 'center',
          color: '#666'
        }}>
          –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏...
        </p>
      </div>
    );
  }

  // –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
  if (filteredPractices.length === 0) {
    return (
      <div style={{ 
        display: 'flex', 
        flexDirection: 'column', 
        alignItems: 'center', 
        justifyContent: 'center',
        minHeight: '100vh',
        padding: '16px'
      }}>
        <div style={{ 
          background: '#F5F5F5',
          borderRadius: '50%',
          width: '64px',
          height: '64px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          marginBottom: '16px',
          fontSize: '32px'
        }}>
          üîç
        </div>
        <h2 style={{ 
          fontFamily: 'Montserrat', 
          fontSize: '20px', 
          textAlign: 'center',
          margin: '0 0 8px 0'
        }}>
          –ü—Ä–∞–∫—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        </h2>
        <p style={{ 
          fontFamily: 'Inter', 
          fontSize: '16px', 
          textAlign: 'center',
          color: '#666',
          marginBottom: '24px'
        }}>
          –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        </p>
        <button 
          onClick={() => router.push('/quiz')}
          className="px-6 py-3 bg-primary text-primary-foreground rounded-md"
        >
          –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        </button>
      </div>
    );
  }

  return (
    <div style={{ 
      padding: '16px',
      maxWidth: '800px',
      margin: '0 auto',
      minHeight: '100vh'
    }}>
      <h1 style={{ 
        fontFamily: 'Montserrat', 
        fontSize: '24px', 
        marginBottom: '8px',
        marginTop: '0'
      }}>
        –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
      </h1>
      
      <p style={{ 
        fontFamily: 'Inter', 
        fontSize: '16px', 
        color: '#666',
        marginBottom: '24px'
      }}>
        –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
      </p>
      
      {/* –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ - –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω */}
      <div>
        {/*filteredPractices.map(practice => (
          <div 
            key={practice.id}
            onClick={() => handleSelectPractice(practice)}
            style={{ 
              marginBottom: '16px',
              border: selectedPractice?.id === practice.id ? '2px solid #337FFF' : 'none',
              borderRadius: '24px',
              overflow: 'hidden',
              transition: 'transform 0.2s ease-in-out'
            }}
          >
            <PracticeCard 
              practice={practice} 
              onClick={handleSelectPractice}
            />
          </div>
        ))*/}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏ */}
      <div style={{ 
        position: 'sticky', 
        bottom: '16px',
        paddingTop: '16px',
        background: 'linear-gradient(to top, white 70%, transparent)'
      }}>
        <button
          onClick={handleStartPractice}
          disabled={!selectedPractice}
          className="w-full py-3 bg-primary text-primary-foreground rounded-md opacity-80"
        >
          –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
        </button>
      </div>
    </div>
  );
} 